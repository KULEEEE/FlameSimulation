#pragma once

#include <vector>
#include <DirectXMath.h>
#include "Common/MathHelper.h"


using namespace std;

class Particles
{

public:


	Particles(int num, float dt, float size);
	Particles(const Particles& rhs) = delete;
	Particles& operator=(const Particles& rhs) = delete;
	~Particles();


	const DirectX::XMVECTOR& Position(int i, int j)const { return mCurrParticle[i].position[j]; }
	const DirectX::XMVECTOR& Color(int i, int j)const { return mCurrParticle[i].color[j]; }
	const DirectX::XMFLOAT2& Texcoord(int i, int j)const { return mCurrParticle[i].texcoord[j]; }
	const int Num() const { return mNumParticles; }

	void Update(float dt, DirectX::XMVECTOR eyePos);
	int VertexCount();
	void makeParticle(int i, DirectX::XMVECTOR eyePos);
	static const int particlevert = 4;
private:
	int mNumParticles = 0;
	float mParticleSize = 0.0f;
	int mVertexCount = 0;
	float mTimeStep = 0.0f;

	int mTime;

	typedef struct particle
	{
		DirectX::XMVECTOR midPoint;
		vector<DirectX::XMVECTOR> position;
		vector<DirectX::XMVECTOR> color;
		vector<DirectX::XMFLOAT2> texcoord;

		DirectX::XMFLOAT3 speed;
		DirectX::XMFLOAT3 gravity;
		DirectX::XMFLOAT3 particleColor;
		float lifespan;
		float fade;

	}particle;

	vector<particle> mCurrParticle;
};
